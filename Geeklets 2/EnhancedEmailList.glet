<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Command</key>
	<string>#!/usr/bin/osascript

-- CONFIGURATION
set numberOfEmails to 7
set notRunningMessage to "Mail.app is not running"

set onlyPrimaryInbox to false

set unread_options to {include:true, ansi:"35", pre:" • ", post:""}
set read_options to {include:true, ansi:"8", pre:" • ", post:""}
set subj_options to {include:true, ansi:"1", pre:"", post:"", padding:{max:0, min:0, side:"left", char:" "}}
set from_options to {include:true, ansi:"0", pre:"", post:" - ", padding:{max:0, min:0, side:"both", char:" "}}
set body_options to {include:false, ansi:"0", pre:"", post:"", padding:{max:0, min:0, side:"right", char:" "}}

-- CODE STARTS HERE

on replace_chars(this_text, search_string, replacement_string)
    set text item delimiters to the search_string
    set the item_list to every text item of this_text
    set AppleScript's text item delimiters to the replacement_string
    set this_text to the item_list as string
    set AppleScript's text item delimiters to ""
    return this_text
end replace_chars

on pad_string(this_text, options)
    set output to ""
    try
        set max to max of options
    on error
        set max to -1
    end try
    
    try
        set min to min of options
    on error
        set min to -1
    end try

    try
        set side to side of options
    on error
        set side to "left"
    end try
    
    try
        set char to char of options
    on error
        set char to " "
    end try
    
    if length of this_text &lt; min then
        set padding to (min - (length of this_text))
        if side = "both" then
            set padding to padding / 2
        end if
        
        if side = "left" or side = "both" then
            repeat padding times
                set output to output &amp; char
            end repeat
        end if
        
        set output to output &amp; this_text
        
        if side = "right" or side = "both" then
            repeat round (padding) rounding up times
                set output to output &amp; char
            end repeat
        end if
    else
        set output to this_text
    end if
    
    if max &gt; 0 and max &lt; length of output then
        set output to characters 1 thru max of output
    end if
    
    return output
end pad_string


on f(org_string, options)
    set esc to ASCII character 27
    
    set _string to org_string
    try
        set pad_options to padding of options
        set _string to my pad_string(_string, pad_options)
    on error
        return esc &amp; "[" &amp; ansi of options &amp; "m" &amp; pre of options &amp; _string &amp; post of options &amp; esc &amp; "[0m"
    end try
    
    return esc &amp; "[" &amp; ansi of options &amp; "m" &amp; pre of options &amp; _string &amp; post of options &amp; esc &amp; "[0m"
end f

tell application "System Events"
    set myList to (name of every process)
end tell

if myList contains "Mail" then
    tell application "Mail"
        set nl to ASCII character 10
        set theOutput to nl
        
        if onlyPrimaryInbox is false then
            set theList to {}
            repeat with _acc in accounts
                if (count of messages of (first mailbox of _acc whose name is "inbox")) &lt; numberOfEmails then
                    set theList to theList &amp; messages of (first mailbox of _acc whose name is "inbox")
                else
                    set theList to theList &amp; messages 1 thru numberOfEmails of (first mailbox of _acc whose name is "inbox")
                end if
            end repeat
            
            set len to length of theList
            if len &gt; 1 then
                set insertPoint to 2
                repeat while insertPoint ≤ len
                    if date received of last item of theList ≥ date received of first item of theList then
                        set theList to {last item of theList} &amp; items 1 thru (len - 1) of theList
                    else
                        set lookFor to 1
                        repeat while lookFor &lt; insertPoint and date received of item lookFor of theList ≥ date received of last item of theList
                            set lookFor to lookFor + 1
                        end repeat
                        set theList to items 1 thru (lookFor - 1) of theList &amp; {last item of theList} &amp; items lookFor thru (len - 1) of theList
                    end if
                    set insertPoint to insertPoint + 1
                end repeat
            end if
            
            if length of theList &gt; numberOfEmails then
                set theList to items 1 thru numberOfEmails of theList
            end if
        else
            if (count of messages of inbox) &lt; numberOfEmails then
                set theList to messages of inbox
            else
                set theList to messages 1 thru numberOfEmails of inbox
            end if
        end if
        
        repeat with theMessage in theList
            if theMessage's read status is not true then
                if include of unread_options is true then
                    set theIndicator to my f("", unread_options)
                else
                    set theIndicator to ""
                end if
            else
                if include of read_options is true then
                    set theIndicator to my f("", read_options)
                else
                    set theIndicator to ""
                end if
            end if
            
            if include of from_options is true then
                set theSender to extract name from sender of theMessage
                set theSender to my f(theSender, from_options)
            else
                set theSender to ""
            end if
            
            if include of subj_options is true then
                set theSubject to subject of theMessage
                set theSubject to my f(theSubject, subj_options)
            else
                set theSubject to ""
            end if
            
            if include of body_options is true then
                set theBody to content of theMessage
                set theBody to my f(theBody, body_options)
                set theBody to my replace_chars(my replace_chars(theBody, ASCII character 10, ""), ASCII character 13, "")
            else
                set theBody to ""
            end if
            
            set theOutput to theOutput &amp; theIndicator &amp; theSender &amp; theSubject &amp; theBody &amp; nl
        end repeat
        
        theOutput
    end tell
else
    notRunningMessage
end if</string>
	<key>DoesOverrideText</key>
	<false/>
	<key>DropShadow</key>
	<true/>
	<key>FailureImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgAAQFYGBYWqyso
	KOExLy/9Kygo4RgWFqoAAQFXAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	BgZ8Rz4+8qWXl//c09P/6+Tl/93T0/+ll5f/Rz4+8gYGBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAQHAgJkSS0t9Kt9ff/ct7j/7NHS/+7T0//s0dL/3be4/6t9ff9JLS30BwIC
	ZQAAAAUAAAAA////AAAAAAAAAAAmLhAQzJA+P/+1TEv/xmNe/8twav/LcGr/y3Bq/8Zj
	Xf+0TEv/kD4//y4QEMwAAAAmAAAAAP///wAAAAAABgAATmAZGvitMi//uSwh/8E+Mf/H
	TED/yU9D/8hNQP/DPjL/uiwi/64xL/9gGRr4BwAATQAAAAD///8AAAAAARUAAGiJGBr/
	wzgx/8tCNP/TV0n/3WZa/+BqXf/eaFr/1VhL/85DNP/GOTL/ihga/xYAAGcAAAAB////
	AAAAAAkYAABslRoW/9JNQP/dYFL/63Jm//KAdv/2hXv/9IF3/+10Zv/gYVP/1k5B/5Ya
	Fv8YAABrAAAACP///wAAAAANDAAAY4UZEu/iXU3/8Hhr//yFef/+lYn//puP//+Xiv/8
	h3r/8Xlr/+ZdTv+HGRLwDQAAZAAAAAv///8AAAAADwAAAE5aDAfL4FZI//6LgP//mI7/
	/qSY//+rnv/+p5r//5qP//+Ngf/nWEn/Ww0HywAAAE0AAAAN////AAAAAAwAAAAyDwAA
	jJInH+z/gHL//6qe//+4rP//vrL//7uu//+soP//g3X/lioh7BEAAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF0dAACpkTUq6dt2Z/z6n5D//7Sj//qhkv/bd2r8kTYr6R4AAKoA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAyAAAAZwYAAKI0DgrIYi4l2XlANeJiLiXZ
	NA4KxwYAAKEAAABoAAAAMwAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	fAAAAI8AAACVAAAAjgAAAHsAAABbAAAANAAAABIAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEUAAAA2AAAAIgAAAA4AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAARAAAACwAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>FontFamily</key>
	<string>LucidaGrande</string>
	<key>FontSize</key>
	<real>10</real>
	<key>GeekletFrame</key>
	<string>{{21, 1232}, {828, 115}}</string>
	<key>HasShadow</key>
	<false/>
	<key>Identifier</key>
	<string>org.tynsoe.geeklet.shell</string>
	<key>Name</key>
	<string>Email</string>
	<key>RefreshInterval</key>
	<integer>10</integer>
	<key>SetLocale</key>
	<true/>
	<key>ShadowBlur</key>
	<real>1.7241379022598267</real>
	<key>ShadowColor</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMBhARm
	ZmZmAAAAAYY=
	</data>
	<key>ShadowSize</key>
	<string>{1.6536900000000003, -1.6536900000000003}</string>
	<key>SuccessImage</key>
	<data>
	TU0AKgAABAj///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAGgAAACAAAAAaAAAA
	DQAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAgBAQFYFhUWqygn
	KOEvLi/9KCco4RYVFqsBAQFYAAAACAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAgG
	AwZ8Pj0+8peYl//S0tP/4+Tl/9LS0/+XmJf/Pj0+8gYDBnwAAAAIAAAAAAAAAAD///8A
	AAAAAAAAAAUDAQJlLTEt9HqRff+40Ln/1efT/9jo1f/V59P/uNG5/3qRff8tMS30AwEC
	ZQAAAAUAAAAA////AAAAAAAAAAAmEBYQyz1tP/9Xm03/eLJX/4e6YP+HuWL/h7pg/3ix
	V/9Wmk3/PWw//xAWEMsAAAAmAAAAAP///wAAAAAAAAAAThY8Gvc8jjD/TJwb/2CnHf9r
	ryz/bLEv/2ywLP9iqR7/TJ4b/zyQMP8WPBr3AAAATQAAAAD///8AAAAAAQAIAGgeYRv/
	VaUq/2WvIP91uzb/gsZI/4bIS/+DyEj/d743/2exIP9WqSr/HmIb/wAIAGcAAAAB////
	AAAAAAgADABsJ3MY/3C6Nv9/xz3/kNNT/57dYv+i32f/n99k/5HWVP+AyD3/cr02/yd0
	GP8ADQBsAAAACf///wAAAAAMAAYAYydqEPB/yD7/lNhW/6PlZv+x8Xb/uPd8/7P0eP+k
	6Gf/ldpX/4DLQP8maxDvAAYAYwAAAAv///8AAAAADwAAAE4XRwXLd8Y5/6foa/+393v/
	wv6F/8r/i//F/4b/uPt8/6rubP95yTr/F0kFygAAAEwAAAAN////AAAAAAwAAAAyAAwA
	jEB6GOyh7Vz/yP+J/9X/mP/b/5//2P+b/83/i/+m9F3/Qn4X7AEMAIsAAAAzAAAADP//
	/wAAAAAFAAAAIAAAAF4GFQCpTIQc6ZbZU/zC+3n/2P+L/8T6fP+a21b8UIkd6AYXAKkA
	AABcAAAAIAAAAAX///8AAAAAAQAAAA0AAAAzAAAAZwAFAKIaMwTHQGIZ2FV5JuFAYhnZ
	GzQEyAAFAKAAAABnAAAAMgAAAA0AAAAB////AAAAAAAAAAADAAAAEQAAADQAAABdAAAA
	ewAAAI8AAACWAAAAjwAAAHsAAABcAAAAMwAAABEAAAADAAAAAP///wAAAAAAAAAAAAAA
	AAMAAAAOAAAAIQAAADYAAABGAAAATAAAAEcAAAA2AAAAIQAAAA0AAAAEAAAAAAAAAAD/
	//8AAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAALAAAAEAAAABMAAAASAAAADAAAAAUAAAAB
	AAAAAAAAAAAAAAAAAA0BAAADAAAAAQAQAAABAQADAAAAAQAQAAABAgADAAAABAAABKoB
	AwADAAAAAQABAAABBgADAAAAAQACAAABEQAEAAAAAQAAAAgBEgADAAAAAQABAAABFQAD
	AAAAAQAEAAABFgADAAAAAQAQAAABFwAEAAAAAQAABAABHAADAAAAAQABAAABUgADAAAA
	AQACAAABUwADAAAABAAABLIAAAAAAAgACAAIAAgAAQABAAEAAQ==
	</data>
	<key>TextColor</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMBhARm
	ZmZmAQEBAYY=
	</data>
	<key>TextStrikethrough</key>
	<integer>0</integer>
	<key>TextUnderline</key>
	<integer>0</integer>
</dict>
</plist>
